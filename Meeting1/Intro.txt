Разработка серверных приложений (РНР)
PHP - Hypertext PreProcessor
 
PHP - язык интерпретирующего типа 
 (REPL - Read-Eval-Print-Loop) - исполнимый
 код остается исходным кодом, доп. файлов
 (типа ЕХЕ не создается)
  
РНР существует в двух вариантах установки
 (функционирования) - командная строка и 
 Mod-PHP, в котором он является модулем
 сервера Apache.

В режиме командной строки - скачивается с 
 www.php.net, распаковывается в любую папку,
 дальше запускается через 
 php.exe [options]
 ./php.exe -r "echo 'Hello';"
 php -r "print('Hello');" 

В режиме Mod-PHP уставливается вместе с Apache
 часто в виде сборок (+СУБД) - XAMPP, OpenServer
 Этот способ рекомендуется для веб-разработки
 Проверка - переход в браузере на http://localhost
 It works! - стандарт для Apache
 XAMPP - стартовая страница
 
Редакторы для РНР: поскольку сборки/компиляции
 нет, спец. IDE не являются необходимыми, подходят
 обычные текстовые редакторы.
 IDE могут понадобиться для отладки. Наиболее
 популярна - PHPStorm. Она платная

РНР придерживался при появлении идеи "второго языка"
 то есть переход на РНР должен был быть удобных
 для всех, независимо от предыдущего опыта.
 Поэтому в РНР очень много дублирующихся операторов,
 присутствуют разные варианты оформления кода
 Например (см. строки 18, 19)
   echo 'Hello'   - операторный вид
   print('Hello') - функциональный вид
 Например, хоть язык и регистрозависимый, но ряд
 констант перегружен в разном регистре
  true, True, TRUE 
   
--------------
Основы синтаксиса (Далее Mod-PHP, если не указано другое)
Язык РНР - надстройка над HTML. Это значит, что
валидный HTML документ можно переименовать в .рhp и он
будет успешно проработан Apache. В этом смысле он похож
на JSP / Razor.

Сами коды РНР вставляются при помощи тегов 
<?php    ?> либо в сокращенном варианте (если 
этот вариант разрешен в настройках): <?    ?>
Специальные теги подстановки выражений <?=    ?>
Если весь документ - это код РНР, то закрывающий тег
не требуется, более того, не рекомендуется ( если
после закрытого тега оставить пробел или разрыв строки,
то Apache перейдет в режим отправки ответа и включит 
этот символ в него. Также следует обращать внимание на то,
что открывающий тег идет первым символом)

Большинство функций и операторов РНР находятся в 
глобальной видимости, из-за этого для освобождения
имен переменных они обязаны начинаться с символа "$":
$x  $count  for($i=0; $i<10; $i++){...}

Типизация - динамическая, похожа на JS. Описание переменных
не требуется, они появляются при первом присваивании
Типа "undefined" нет, проверка наличия переменной
isset($x), isset($arr[2]) 
разрушение переменной - unset($x)

О строках:
'' - константные строки, в них переменные не подставляются
"" - строки с подстановкой переменных
для записи больших строк:
$str = <<<SQL   // SQL маркер (любой, по правилам имен)
	SELECT      // Любой текст,
	  *         //  в т.ч. содержащий '', ""
	FROM        // 
	  table_$n  // переменные вычисляются (подставляются)
SQL;            // !! маркер с начала строки, в конце ";" и "\n"
!! популярные ошибки: конечный маркер не с начала строки,
   не содержит "\n" или содержит пробелы
Для подстановки более сложных выражений 
${arr[$x+1]}  {$arr[$x+1]}
Для константных строк маркер берется в '':  <<<'SQL'

!! Для конкатенации строк применяется оператор "."
 $str = "Hello" . "World";
 $str .= "!!";
!! Оператор "+" работает только с числами 

*********
Массивы
Конструктор массива:
$arr1 = array() ;  // старый синтаксис
$arr2 = [] ;       // новый, разницы нет (только совместимость)
Добавление элемента в массива
в конец
$arr1[] = "Hello" ;
$arr1[] = "World" ;
$arr1[] = 2;
по индексу (в РНР все массивы ассоциативные)
$arr1[4] = "4" ;
$arr1[-4] = "-4" ;
$arr1["index"] = "the index" ;
Для контроля значений в массиве его можно вывести
отладочной функцией print_r. Для наглядности вывод
сопровождают тегом сохранения форматирования <pre>:
 echo "<pre>" ; print_r( $arr1 ) ;


